@page "/crear-post-con-blazorise"
@using ClienteBlogBlazorWASM.Services
@using ClienteBlogBlazorWASM.Services.IServices
@using ClienteBlogBlazorWASM.Modelos
@using Microsoft.AspNetCore.Authorization
@using ClienteBlogBlazorWASM.Pages
@using Blazorise
@using Blazorise.RichTextEdit
@using System.Net.Http.Headers
@using System.Text.RegularExpressions
@using System.Security.Claims
@using Microsoft.Extensions.DependencyInjection
@inject AuthenticationStateProvider AuthStateProvider


@inject IPostService postServices
@inject IJSRuntime JsRuntime
@inject NavigationManager navigationManager
@attribute [Authorize]

<h1 class="text-center">Crear Post con Blazorise</h1>

<div class="crear-post-card">
    <div class="card-header">
        <h4 class="card-title">Nuevo Post</h4>
    </div>
    <div class="card-body">
        <EditForm Model="nuevoPost" OnValidSubmit="ManejadorOnCrearPost">
            <Field>
                <FieldLabel>Título:</FieldLabel>
                <TextEdit @bind-Text="nuevoPost.Titulo" Placeholder="Ingresa el título" />
            </Field>


            <Field>
                <FieldLabel>Descripción:</FieldLabel>
                <div class="richTextToolbar">
                    <RichTextEdit @ref="richTextEditRef" Class="rich-text-size-selector" Placeholder="Ingresa la descripción aquí...">
                        <Editor></Editor>
                        <Toolbar>
                            <RichTextEditToolbarGroup>
                                <!-- Botones básicos -->
                                <RichTextEditToolbarButton Action="RichTextEditAction.Bold" />
                                <RichTextEditToolbarButton Action="RichTextEditAction.Italic" />
                                <RichTextEditToolbarButton Action="RichTextEditAction.Underline" />

                                <!-- Selector de tamaño de texto -->
                                <RichTextEditToolbarSelect Action="RichTextEditAction.Size">
                                    <RichTextEditToolbarSelectItem Value="small">Pequeño</RichTextEditToolbarSelectItem>
                                    <RichTextEditToolbarSelectItem Selected />
                                     <RichTextEditToolbarSelectItem Value="large">Grande</RichTextEditToolbarSelectItem>
                                     <RichTextEditToolbarSelectItem Value="huge">Muy Grande</RichTextEditToolbarSelectItem>
                                 </RichTextEditToolbarSelect>

                                 <!-- Alineación del texto -->
                                 <RichTextEditToolbarButton Action="RichTextEditAction.Align" Value="left" />
                                 <RichTextEditToolbarButton Action="RichTextEditAction.Align" Value="center" />
                                 <RichTextEditToolbarButton Action="RichTextEditAction.Align" Value="right" />
                                 <RichTextEditToolbarButton Action="RichTextEditAction.Align" Value="justify" />
                             </RichTextEditToolbarGroup>

                             <RichTextEditToolbarGroup>
                                 <!-- Listas -->
                                 <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="ordered" />
                                 <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="bullet" />

                                 <!-- Enlaces e Imágenes -->
                                 <RichTextEditToolbarButton Action="RichTextEditAction.Link" />
                                 <RichTextEditToolbarButton Action="RichTextEditAction.Image" />
                             </RichTextEditToolbarGroup>

                             <RichTextEditToolbarGroup Float="Float.End">
                                 <Button onClick="window.open('https://www.quilljs.com/','quilljs')"><Icon Name="IconName.InfoCircle" /></Button>
                             </RichTextEditToolbarGroup>
                         </Toolbar>


                     </RichTextEdit>
                 </div>

             </Field>

             <Field>
                 <FieldLabel>Etiquetas:</FieldLabel>
                 <TextEdit @bind-Text="nuevoPost.Etiquetas" Placeholder="Ingresa las etiquetas separadas por coma" />
             </Field>

             <Field>
                 <FieldLabel>Imagen:</FieldLabel>
                 <InputFile OnChange="ManejadorOnSubidaArchivo" />
                 @if (imagenPost != null)
                {
                    <img src="@imagenPost" style="width:300px">
                }
            </Field>

            <!-- Agrega aquí más campos según necesites -->

            <Button Color="Color.Primary" Type="ButtonType.Submit">Crear nuevo Post</Button>
        </EditForm>
    </div>
</div>

<style>
    .crear-post-card {
        /* Estilos personalizados para esta tarjeta específica */
        /* Por ejemplo: */
        margin: auto;
        max-width: 800px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        padding: 20px;
        background-color: wheat
    }

        .crear-post-card .richTextToolbar .ql-toolbar {
            /* Estilos para la barra de herramientas del RichTextEdit */
            /* Por ejemplo: */
            font-size: 14px;
            background-color: #f4f4f4;
            border: 1px solid #ccc;
        }

</style>



@code {
    private Post nuevoPost = new Post();
    private RichTextEdit richTextEditRef; // Asegúrate de que esta referencia sea a tu componente RichTextEdit personalizado

    private string html;

    //cuidado al nombrar los componentes ya que si ponemos de nombre CrearPost nos dara error al crear la variable CrearPost
    [Parameter]
    public string imagenPost { get; set; }

    // [Parameter]
    // public EventCallback<string> OnChange { get; set; }


    public string RemoveHtmlTags(string html)
    {
        return Regex.Replace(html, "<.*?>", String.Empty);
    }

    private async Task ManejadorOnCrearPost()
    {
        if (richTextEditRef != null)
        {
            // Obtiene la versión HTML de la descripción
            var descriptionHtml = await richTextEditRef.GetHtmlAsync();

            // Configura la versión HTML de la descripción para enviar a la API
            nuevoPost.DescripcionHtml = descriptionHtml;

            // Procesa y configura la versión de texto sin formato de la descripción para enviar a la API
            // Elimina las etiquetas HTML y reemplaza los saltos de línea con un carácter especial
            nuevoPost.Descripcion = RemoveHtmlTags(descriptionHtml).Replace("\n", "|n|").Replace("\r", "").Trim();



            // Obtiene una instancia de AuthStateProvider
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            // Guarda la imagen
            nuevoPost.ImagenUrl = imagenPost;

            // Envía el post a la API
            await postServices.CrearPost(nuevoPost);

            // Navegar a la lista de posts
            navigationManager.NavigateTo("/MisPost");
        }
        else
        {
            throw new Exception("Error al crear el post!");
        }
    }

    private async Task ManejadorOnSubidaArchivo(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;

        if (imageFile != null)
        {
            var resizedFile = await imageFile.RequestImageFileAsync("image/png", 1000, 700);
            using (var ms = resizedFile.OpenReadStream(resizedFile.Size))
            {
                var content = new MultipartFormDataContent();

                content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
                content.Add(new StreamContent(ms, Convert.ToInt32(resizedFile.Size)), "image", imageFile.Name);
                imagenPost = await postServices.SubidaDeImagen(content);
                // await OnChange.InvokeAsync(imagenPost);

            }
        }
    }


    // private async Task ManejadorOnCrearPost()
    // {
    //     if (richTextEditRef != null)
    //     {

    //         var descriptionHtml = await richTextEditRef.GetHtmlAsync();
    //         var descriptionWithoutHtml = RemoveHtmlTags(descriptionHtml);

    //         // nuevoPost.Descripcion = await richTextEditRef.GetHtmlAsync();

    //         nuevoPost.Descripcion = descriptionWithoutHtml.Replace("\n", "|n|");
    //         nuevoPost.ImagenUrl = imagenPost;


    //         // Realizar operaciones adicionales como guardar en la base de datos



    //         await postServices.CrearPost(nuevoPost);
    //         navigationManager.NavigateTo("/PostList");
    //     }
    //     else
    //     {
    //         // Manejar el caso en que richTextEditRef sea nulo
    //     }
    // }



    // private async Task ManejadorOnCrearPost()
    // {
    //     if (richTextEditRef != null)
    //     {
    //         // Obtiene la versión HTML de la descripción
    //         var descriptionHtml = await richTextEditRef.GetHtmlAsync();

    //         // Configura la versión HTML de la descripción para enviar a la API
    //         nuevoPost.DescripcionHtml = descriptionHtml;

    //         // Procesa y configura la versión de texto sin formato de la descripción para enviar a la API
    //         // Elimina las etiquetas HTML y reemplaza los saltos de línea con un carácter especial
    //         nuevoPost.Descripcion = RemoveHtmlTags(descriptionHtml).Replace("\n", "|n|").Replace("\r", "").Trim();

    //         // Obtiene una instancia de AuthStateProvider para obtener el UserId
    //         var authState = await AuthStateProvider.GetAuthenticationStateAsync();
    //         var user = authState.User;

    //         // Obtiene el UserId del usuario actual
    //         var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

    //         // Verifica si se obtuvo correctamente el UserId
    //         if (!string.IsNullOrEmpty(userId) && int.TryParse(userId, out int userIdValue))
    //         {
    //             // Asigna el UserId al nuevo post
    //             nuevoPost.UsuarioId = userIdValue;

    //             // Guarda la imagen
    //             nuevoPost.ImagenUrl = imagenPost;

    //             // Envía el post a la API
    //             await postServices.CrearPost(nuevoPost);

    //             // Navega a la lista de posts después de crearlo
    //             navigationManager.NavigateTo("/MisPost");
    //         }
    //         else
    //         {
    //             throw new Exception("No se pudo obtener el UserId del usuario autenticado.");
    //         }
    //     }
    //     else
    //     {
    //         throw new Exception("Error al crear el post!");
    //     }
    // }
}
