

@page "/crear-post-con-blazorise"
@using ClienteBlogBlazorWASM.Services
@using ClienteBlogBlazorWASM.Services.IServices
@using ClienteBlogBlazorWASM.Modelos
@using Microsoft.AspNetCore.Authorization
@using ClienteBlogBlazorWASM.Pages
@using Blazorise
@using Blazorise.RichTextEdit
@using System.Net.Http.Headers
@using System.Text.RegularExpressions
@using System.Security.Claims
@using Microsoft.Extensions.DependencyInjection
@inject AuthenticationStateProvider AuthStateProvider

@inject IPostService postServices
@inject IJSRuntime JsRuntime
@inject NavigationManager navigationManager
@attribute [Authorize]

<h1 class="text-center">Crear Post con Blazorise</h1>

<div class="card">
    <div class="card-header">
        <h4 class="card-title">Nuevo Post</h4>
    </div>
    <div class="card-body">
        <EditForm Model="nuevoPost" OnValidSubmit="ManejadorOnCrearPost">
           @*  <DataAnnotationsValidator />
            <Microsoft.AspNetCore.Components.Forms.ValidationSummary /> *@

            <div class="form-group">
                <label>Título:</label>
                <InputText @bind-Value="nuevoPost.Titulo" class="form-control" placeholder="Ingresa el título" />
                <ValidationMessage For="@(() => nuevoPost.Titulo)" />
            </div>

            <div class="form-group">
                <label>Descripción:</label>
                <div class="richTextToolbar">
                    <RichTextEdit @ref="richTextEditRef" Class="rich-text-size-selector" Placeholder="Ingresa la descripción aquí...">
                        <Editor></Editor>
                        <Toolbar>
                            <RichTextEditToolbarGroup>
                                <!-- Botones básicos -->
                                <RichTextEditToolbarButton Action="RichTextEditAction.Bold" />
                                <RichTextEditToolbarButton Action="RichTextEditAction.Italic" />
                                <RichTextEditToolbarButton Action="RichTextEditAction.Underline" />

                                <!-- Selector de tamaño de texto -->
                                <RichTextEditToolbarSelect Action="RichTextEditAction.Size">
                                    <RichTextEditToolbarSelectItem Value="small">Pequeño</RichTextEditToolbarSelectItem>
                                    <RichTextEditToolbarSelectItem Selected />
                                    <RichTextEditToolbarSelectItem Value="large">Grande</RichTextEditToolbarSelectItem>
                                    <RichTextEditToolbarSelectItem Value="huge">Muy Grande</RichTextEditToolbarSelectItem>
                                </RichTextEditToolbarSelect>

                                <!-- Alineación del texto -->
                                <RichTextEditToolbarButton Action="RichTextEditAction.Align" Value="left" />
                                <RichTextEditToolbarButton Action="RichTextEditAction.Align" Value="center" />
                                <RichTextEditToolbarButton Action="RichTextEditAction.Align" Value="right" />
                                <RichTextEditToolbarButton Action="RichTextEditAction.Align" Value="justify" />
                            </RichTextEditToolbarGroup>

                            <RichTextEditToolbarGroup>
                                <!-- Listas -->
                                <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="ordered" />
                                <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="bullet" />

                                <!-- Enlaces e Imágenes -->
                                <RichTextEditToolbarButton Action="RichTextEditAction.Link" />
                                <RichTextEditToolbarButton Action="RichTextEditAction.Image" />
                            </RichTextEditToolbarGroup>

                            <RichTextEditToolbarGroup Float="Float.End">
                                <Button onClick="window.open('https://www.quilljs.com/','quilljs')"><Icon Name="IconName.InfoCircle" /></Button>
                            </RichTextEditToolbarGroup>
                        </Toolbar>
                    </RichTextEdit>
                </div>
               @*  <ValidationMessage For="@(() => nuevoPost.Descripcion)" /> *@
            </div>

            <div class="form-group">
                <label>Etiquetas:</label>
                <InputText @bind-Value="nuevoPost.Etiquetas" class="form-control" placeholder="Ingresa las etiquetas separadas por coma" />
                <ValidationMessage For="@(() => nuevoPost.Etiquetas)" />
            </div>

            <div class="form-group">
                <label>Imagen:</label>
                <div class="imagen-post mb-3" style="background: url('@nuevoPost.ImagenUrl'); width:300px; height:169px; background-size:cover"></div>
                <InputFile OnChange="ManejadorOnSubidaArchivo" />
                @if (imagenPost != null)
                {
                    <img src="@imagenPost" style="width:300px">
                }
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-2">
                        <button type="submit" class="btn btn-success"><i class="bi bi-gear-fill">&nbsp; Crear Post</i></button>
                    </div>
                    <div class="col-6">
                        <NavLink href="posts" class="btn btn-secondary"><i class="bi bi-circle-fill">&nbsp; Volver atrás</i></NavLink>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private Post nuevoPost = new Post();
    private Blazorise.RichTextEdit.RichTextEdit richTextEditRef; // Asegúrate de que esta referencia sea a tu componente RichTextEdit de Blazorise

    private string html;

    [Parameter]
    public string imagenPost { get; set; }

    public string RemoveHtmlTags(string html)
    {
        return Regex.Replace(html, "<.*?>", String.Empty);
    }

    private async Task ManejadorOnCrearPost()
    {
        if (richTextEditRef != null)
        {
            var descriptionHtml = await richTextEditRef.GetHtmlAsync();
            nuevoPost.DescripcionHtml = descriptionHtml;
            nuevoPost.Descripcion = RemoveHtmlTags(descriptionHtml).Replace("\n", "|n|").Replace("\r", "").Trim();

            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            nuevoPost.ImagenUrl = imagenPost;

            await postServices.CrearPost(nuevoPost);
            await JsRuntime.ToastrSuccess("Enhorabuena! Acabas de crear un nuevo Post!");

            navigationManager.NavigateTo("/MisPost");
        }
        else
        {
            throw new Exception("Error al crear el post!");
        }
    }

    private async Task ManejadorOnSubidaArchivo(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;

        if (imageFile != null)
        {
            var resizedFile = await imageFile.RequestImageFileAsync("image/png", 1000, 700);
            using (var ms = resizedFile.OpenReadStream(resizedFile.Size))
            {
                var content = new MultipartFormDataContent();
                content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
                content.Add(new StreamContent(ms, Convert.ToInt32(resizedFile.Size)), "image", imageFile.Name);
                imagenPost = await postServices.SubidaDeImagen(content);
            }
        }
    }
}
