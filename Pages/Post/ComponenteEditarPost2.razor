@page "/editar-post2/{Id:int}"
@using ClienteBlogBlazorWASM.Services.IServices
@using ClienteBlogBlazorWASM.Modelos
@using HtmlAgilityPack
@using Microsoft.AspNetCore.Authorization
@using Blazorise.RichTextEdit
@using System.Net.Http.Headers
@using System.Text.RegularExpressions
@inject IPostService postServices
@inject IJSRuntime JsRuntime
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthStateProvider


<h1 class="text-center">Edita tus Post y añade nueva información relevante</h1>

<div class="card">
    <div class="card-header">
        <h4 class="card-title">Editar Post Existente</h4>
    </div>
    <div class="card-body">
        <EditForm Model="EditarPost" OnValidSubmit="@(() => ManejadorOnEditarPost())">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label>Título:</label>
                <InputText @bind-Value="EditarPost.Titulo" class="form-control" placeholder="Ingresa el título" />
                <ValidationMessage For="@(() => EditarPost.Titulo)" />
            </div>

            <div class="form-group">
                <Blazorise.FieldLabel>Descripción:</Blazorise.FieldLabel>
                <RichTextEdit @ref="richTextEditRef" @bind-Value="EditarPost.DescripcionHtml" Class="rich-text-size-selector" Placeholder="Ingresa la descripción aquí...">
                    <Editor>
                        @((MarkupString)EditarPost.DescripcionHtml)
                    </Editor>
                </RichTextEdit>
                <ValidationMessage For="@(() => EditarPost.DescripcionHtml)" />
            </div>

            <div class="form-group">
                <label>Etiquetas:</label>
                <InputText @bind-Value="EditarPost.Etiquetas" class="form-control" placeholder="Ingresa las etiquetas separadas por coma" />
                <ValidationMessage For="@(() => EditarPost.Etiquetas)" />
            </div>

            <div class="form-group">
                <label>Imagen Post</label>
                <div class="imagen-post mb-3" style="background: url('@EditarPost.ImagenUrl'); width:300px; height:169px; background-size:cover"></div>
                <InputFile OnChange="@ManejadorOnSubidaArchivo" />
                @if (imagenPost != null)
                {
                    <img src="@imagenPost" style="width:300px" />
                }
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-2">
                        <button type="submit" class="btn btn-success"><i class="bi bi-gear-fill">&nbsp; Editar Post</i></button>
                    </div>
                    <div class="col-6">
                        <NavLink href="posts" class="btn btn-secondary"><i class="bi bi-circle-fill">&nbsp; Volver atrás</i></NavLink>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private Post EditarPost { get; set; } = new Post();
    private RichTextEdit richTextEditRef;

    [Parameter] public int Id { get; set; }
    [Parameter] public string imagenPost { get; set; }

    protected override async Task OnInitializedAsync()
    {
        EditarPost = await postServices.GetPost(Id);
    }

    private async Task ManejadorOnEditarPost()
    {
        if (richTextEditRef != null)
        {
            var descriptionPlainText = RemoveHtmlTags(await richTextEditRef.GetHtmlAsync());
            EditarPost.Descripcion = descriptionPlainText;
            EditarPost.DescripcionHtml = await richTextEditRef.GetHtmlAsync();
            EditarPost.ImagenUrl = imagenPost;

            await postServices.ActualizarPost(Id, EditarPost);
            await JsRuntime.ToastrSuccess("¡Enhorabuena! Acabas de actualizar tu Post!");
            navigationManager.NavigateTo("/MisPost");
        }
        else
        {
            throw new Exception("Error al editar el post!");
        }
    }

    public string RemoveHtmlTags(string html)
    {
        return Regex.Replace(html, "<.*?>", String.Empty);
    }

    private async Task ManejadorOnSubidaArchivo(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        if (imageFile != null)
        {
            var resizedFile = await imageFile.RequestImageFileAsync("image/png", 1000, 700);
            using (var ms = resizedFile.OpenReadStream(resizedFile.Size))
            {
                var content = new MultipartFormDataContent
                {
                    Headers = { ContentDisposition = new ContentDispositionHeaderValue("form-data") }
                };
                content.Add(new StreamContent(ms, Convert.ToInt32(resizedFile.Size)), "image", imageFile.Name);
                imagenPost = await postServices.SubidaDeImagen(content);
            }
        }
    }
}
