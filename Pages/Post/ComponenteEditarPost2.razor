@page "/editar-post2/{Id:int}"
@using ClienteBlogBlazorWASM.Services
@using ClienteBlogBlazorWASM.Services.IServices
@using ClienteBlogBlazorWASM.Modelos
@using Microsoft.AspNetCore.Authorization
@using ClienteBlogBlazorWASM.Pages
@using Blazorise
@using Blazorise.RichTextEdit
@using System.Net.Http.Headers
@using System.Text.RegularExpressions
@using System.Security.Claims
@using Microsoft.Extensions.DependencyInjection
@inject AuthenticationStateProvider AuthStateProvider


@inject IPostService postServices
@inject IJSRuntime JsRuntime
@inject NavigationManager navigationManager
@attribute [Authorize]

<h1 class="text-center">Crear Post con Blazorise</h1>

<div class="crear-post-card">
    <div class="card-header">
        <h4 class="card-title">Nuevo Post</h4>
    </div>
    <div class="card-body">
        <EditForm Model="EditarPost" OnValidSubmit="ManejadorOnEditarPost">
            <Field>
                <FieldLabel>Título:</FieldLabel>
                <TextEdit @bind-Text="EditarPost.Titulo" Placeholder="Ingresa el título" />
            </Field>


            <Field>
                <FieldLabel>Descripción:</FieldLabel>
                <div class="richTextToolbar">
                    <RichTextEdit @ref="richTextEditRef" Class="rich-text-size-selector" Placeholder="Ingresa la descripción aquí...">
                        <Editor></Editor>
                        <Toolbar>
                            <RichTextEditToolbarGroup>
                                <!-- Botones básicos -->
                                <RichTextEditToolbarButton Action="RichTextEditAction.Bold" />
                                <RichTextEditToolbarButton Action="RichTextEditAction.Italic" />
                                <RichTextEditToolbarButton Action="RichTextEditAction.Underline" />

                                <!-- Selector de tamaño de texto -->
                                <RichTextEditToolbarSelect Action="RichTextEditAction.Size">
                                    <RichTextEditToolbarSelectItem Value="small">Pequeño</RichTextEditToolbarSelectItem>
                                    <RichTextEditToolbarSelectItem Selected />
                                     <RichTextEditToolbarSelectItem Value="large">Grande</RichTextEditToolbarSelectItem>
                                     <RichTextEditToolbarSelectItem Value="huge">Muy Grande</RichTextEditToolbarSelectItem>
                                 </RichTextEditToolbarSelect>

                                 <!-- Alineación del texto -->
                                 <RichTextEditToolbarButton Action="RichTextEditAction.Align" Value="left" />
                                 <RichTextEditToolbarButton Action="RichTextEditAction.Align" Value="center" />
                                 <RichTextEditToolbarButton Action="RichTextEditAction.Align" Value="right" />
                                 <RichTextEditToolbarButton Action="RichTextEditAction.Align" Value="justify" />
                             </RichTextEditToolbarGroup>

                             <RichTextEditToolbarGroup>
                                 <!-- Listas -->
                                 <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="ordered" />
                                 <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="bullet" />

                                 <!-- Enlaces e Imágenes -->
                                 <RichTextEditToolbarButton Action="RichTextEditAction.Link" />
                                 <RichTextEditToolbarButton Action="RichTextEditAction.Image" />
                             </RichTextEditToolbarGroup>

                             <RichTextEditToolbarGroup Float="Float.End">
                                 <Button onClick="window.open('https://www.quilljs.com/','quilljs')"><Icon Name="IconName.InfoCircle" /></Button>
                             </RichTextEditToolbarGroup>
                         </Toolbar>


                     </RichTextEdit>
                 </div>

             </Field>

             <Field>
                 <FieldLabel>Etiquetas:</FieldLabel>
                 <TextEdit @bind-Text="EditarPost.Etiquetas" Placeholder="Ingresa las etiquetas separadas por coma" />
             </Field>

             <Field>
                 <FieldLabel>Imagen:</FieldLabel>
                 <InputFile OnChange="ManejadorOnSubidaArchivo" />
                 @if (imagenPost != null)
                {
                    <img src="@imagenPost" style="width:300px">
                }
            </Field>

            <!-- Agrega aquí más campos según necesites -->

            <Button Color="Color.Primary" Type="ButtonType.Submit">Crear nuevo Post</Button>
        </EditForm>
    </div>
</div>


@code {
    private Post EditarPost { get; set; } = new Post();
    private RichTextEdit richTextEditRef;

    [Parameter] public int Id { get; set; }
    [Parameter] public string imagenPost { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Asume que este método carga correctamente el post existente, incluyendo Descripcion y DescripcionHtml
        EditarPost = await postServices.GetPost(Id);
    }

    private async Task ManejadorOnEditarPost()
    {
        if (richTextEditRef != null)
        {
            // Obtiene la versión HTML de la descripción directamente desde el editor
            var descriptionHtml = await richTextEditRef.GetHtmlAsync();

            // Actualiza la versión HTML de la descripción
            EditarPost.DescripcionHtml = descriptionHtml;

            // Convierte la versión HTML a texto plano y actualiza la descripción
            EditarPost.Descripcion = RemoveHtmlTags(descriptionHtml).Replace("\n", "|n|").Replace("\r", "").Trim(); ;

            // Actualiza la imagen si es aplicable
            EditarPost.ImagenUrl = imagenPost;

            // Realiza la actualización llamando a tu servicio/API
            await postServices.ActualizarPost(Id, EditarPost);

            // Notificación de éxito y redirección
            await JsRuntime.ToastrSuccess("¡Enhorabuena! Acabas de actualizar tu Post!");
            navigationManager.NavigateTo("/MisPost");
        }
        else
        {
            throw new Exception("Error al editar el post!");
        }
    }

    public string RemoveHtmlTags(string html)
    {
        return Regex.Replace(html, "<.*?>", String.Empty);
    }


    private async Task ManejadorOnSubidaArchivo(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        if (imageFile != null)
        {
            var resizedFile = await imageFile.RequestImageFileAsync("image/png", 1000, 700);
            using (var ms = resizedFile.OpenReadStream(resizedFile.Size))
            {
                var content = new MultipartFormDataContent
                    {
                        Headers = { ContentDisposition = new ContentDispositionHeaderValue("form-data") }
                    };
                content.Add(new StreamContent(ms, Convert.ToInt32(resizedFile.Size)), "image", imageFile.Name);
                imagenPost = await postServices.SubidaDeImagen(content);
            }
        }
    }
}
